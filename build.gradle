// ========================================================================================
// 插件和基本配置
// ========================================================================================

plugins {
    id 'java'  // Java 构建支持
    id "io.freefair.lombok" version "8.14"  // Lombok 注解处理
    id "run.halo.plugin.devtools" version "0.6.1" apply false  // Halo 插件开发工具 - 禁用自动应用
}

// 手动应用 Halo 插件但禁用默认组件索引任务
apply plugin: "run.halo.plugin.devtools"

group 'top.howiehz.halo.plugin.extra.api'  // Maven 坐标的 groupId

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)  // 使用 Java 21
    }
}

repositories {
    mavenCentral()  // Maven 中央仓库
}

// ========================================================================================
// 多平台 Javet 依赖配置
// ========================================================================================

// 定义支持的平台列表，每个平台对应其 native 库标识符
def platforms = [
    'Linux-arm64': ['linux-arm64'],
    'Linux-x86_64': ['linux-x86_64'],
    'Macos-arm64': ['macos-arm64'],
    'Macos-x86_64': ['macos-x86_64'],
    'Windows-x86_64': ['windows-x86_64']
]

// 为每个平台创建专用的 Gradle 配置，继承自 runtimeClasspath
platforms.each { variant, platformList ->
    configurations.create("javet${variant}") {
        extendsFrom configurations.runtimeClasspath
    }
}

// 为每个平台配置添加对应的 Javet 核心和 native 库依赖
platforms.each { variant, platformList ->
    dependencies.add("javet${variant}", 'com.caoccao.javet:javet:4.1.7')  // Javet 核心
    platformList.each { platform ->
        def artifactName = "javet-node-${platform}"
        dependencies.add("javet${variant}", "com.caoccao.javet:${artifactName}:4.1.7")  // 平台特定 native 库
    }
}

// 创建包含所有平台的配置，用于构建全平台版本
configurations {
    javetAllPlatforms {
        extendsFrom configurations.runtimeClasspath
    }
}

// 为全平台配置添加 Javet 核心和所有平台的 native 库
dependencies.add("javetAllPlatforms", 'com.caoccao.javet:javet:4.1.7')  // Javet 核心
platforms.each { variant, platformList ->
    platformList.each { platform ->
        def artifactName = "javet-node-${platform}"
        dependencies.add("javetAllPlatforms", "com.caoccao.javet:${artifactName}:4.1.7")  // 所有平台 native 库
    }
}

// ========================================================================================
// 项目依赖
// ========================================================================================

dependencies {
    // Halo 平台依赖
    implementation platform('run.halo.tools.platform:plugin:2.21.0')  // Halo BOM，统一版本管理
    compileOnly 'run.halo.app:api'  // Halo API，编译时需要，运行时由 Halo 提供
    
    // JavaScript 引擎依赖 - Javet，用于执行 JS 代码
    implementation 'com.caoccao.javet:javet:4.1.7'
    
    // Spring 框架依赖 - 编译时需要，运行时由 Halo 提供
    compileOnly 'org.springframework:spring-context'     // Spring 上下文
    compileOnly 'org.springframework:spring-core'        // Spring 核心
    compileOnly 'org.springframework:spring-beans'       // Spring Bean 管理
    compileOnly 'org.springframework.data:spring-data-commons'  // Spring Data 通用组件
    compileOnly 'io.projectreactor:reactor-core'         // 响应式编程支持


    // 测试依赖
    testImplementation 'run.halo.app:api'                // 测试时需要 Halo API 实现
    testImplementation 'org.springframework.boot:spring-boot-starter-test'  // Spring Boot 测试支持
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'           // JUnit 平台启动器
    testImplementation 'com.caoccao.javet:javet:4.1.7'  // 测试时需要 Javet
}

test {
    useJUnitPlatform()  // 使用 JUnit 5 平台
}

// ========================================================================================
// 编译配置
// ========================================================================================

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"   // 使用 UTF-8 编码
    options.release = 21         // 编译目标为 Java 21
}

// ========================================================================================
// 资源处理任务
// ========================================================================================

// UI 前端资源处理 - 将 ui 子项目的构建输出复制到插件的 console 目录
tasks.register('processUiResources', Copy) {
    from project(':ui').layout.buildDirectory.dir('dist')          // 来源：ui 项目构建输出
    into layout.buildDirectory.dir('resources/main/console')       // 目标：插件控制台资源目录
    shouldRunAfter tasks.named('processResources')                 // 在标准资源处理后执行
}

// Shiki 代码高亮资源处理 - 将 Shiki JS 库复制到插件的 js 目录（仅完整版需要）
tasks.register('processShikiResources', Copy) {
    from project(':shiki').layout.buildDirectory.dir('dist')       // 来源：shiki 项目构建输出
    into layout.buildDirectory.dir('resources/main/js')            // 目标：插件 JS 资源目录
    include 'shiki.umd.cjs'                                        // 只包含 Shiki UMD 模块
    shouldRunAfter tasks.named('processResources')                 // 在标准资源处理后执行
}

// ========================================================================================
// 自定义组件索引生成 - 使用 buildSrc 中的任务
// ========================================================================================

// YAML 版本设置逻辑
def configurePluginYamlVersion() {
    return { task ->
        def pluginYaml = file('src/main/resources/plugin.yaml')
        if (pluginYaml.exists()) {
            def yamlContent = pluginYaml.text
            def versionPattern = /(spec:\s*\n(?:\s+.*\n)*?\s+version:\s*)"[^"]*"/
            def updatedContent = yamlContent.replaceFirst(versionPattern, '$1"' + project.version + '"')
            pluginYaml.text = updatedContent
            logger.info("Updated plugin.yaml version to: ${project.version}")
        }
    }
}

// 在 afterEvaluate 中创建任务，确保 buildSrc 类可用
def jarLiteIndexTask
def jarFullAllPlatformsIndexTask

// 统一的 afterEvaluate 块，处理所有延迟配置
afterEvaluate {
    // 禁用 Halo 插件自动创建的组件索引任务，使用我们的自定义实现
    tasks.matching { it.name == 'generatePluginComponentsIdx' }.configureEach {
        enabled = false
    }
    
    // 配置子项目依赖，确保子项目任务已经完全注册
    tasks.named('processUiResources') {
        dependsOn project(':ui').tasks.named('assemble')
    }
    tasks.named('processShikiResources') {
        dependsOn project(':shiki').tasks.named('assemble')
    }
    
    // 配置完整版本的编译任务依赖
    tasks.named('classes') {
        dependsOn tasks.named('processUiResources')    // UI 资源必须先处理
        dependsOn tasks.named('processShikiResources') // Shiki 资源必须先处理
    }
    // 导入 buildSrc 中的任务类
    def MultiJarPluginComponentsIndexTask = top.howiehz.gradle.MultiJarPluginComponentsIndexTask
    
    // 为 jarLite 创建组件索引任务 - 只扫描基础类
    jarLiteIndexTask = tasks.register('generatePluginComponentsIdxJarLite', MultiJarPluginComponentsIndexTask) {
        group = 'halo server'
        description = 'Generates plugin components index file for jarLite'
        
        classesDirs.from(sourceSets.main.output.classesDirs.filter { dir ->
            // 只包含基础类，排除 JS 相关功能
            !dir.toString().contains('js')
        })
        jarTaskName.set('jarLite')
        outputFile.set(layout.buildDirectory.file("tmp/jarLite/META-INF/plugin-components.idx"))
        
        doFirst(configurePluginYamlVersion())
    }

    // 为 jarFullAllPlatforms 创建组件索引任务 - 扫描所有类
    jarFullAllPlatformsIndexTask = tasks.register('generatePluginComponentsIdxJarFullAllPlatforms', MultiJarPluginComponentsIndexTask) {
        group = 'halo server'
        description = 'Generates plugin components index file for jarFullAllPlatforms'
        
        classesDirs.from(sourceSets.main.output.classesDirs)
        jarTaskName.set('jarFullAllPlatforms')
        outputFile.set(layout.buildDirectory.file("tmp/jarFullAllPlatforms/META-INF/plugin-components.idx"))
        
        doFirst(configurePluginYamlVersion())
    }

    // 为每个平台特定的完整版 JAR 创建组件索引任务
    platforms.each { variant, platformList ->
        def taskName = "jarFull${variant}"
        def indexTaskName = "generatePluginComponentsIdx${taskName.capitalize()}"
        
        tasks.register(indexTaskName, MultiJarPluginComponentsIndexTask) {
            group = 'halo server'
            description = "Generates plugin components index file for ${taskName}"
            
            classesDirs.from(sourceSets.main.output.classesDirs)
            jarTaskName.set(taskName)
            outputFile.set(layout.buildDirectory.file("tmp/${taskName}/META-INF/plugin-components.idx"))
            
            doFirst(configurePluginYamlVersion())
        }
    }
    
    // 创建 jarLite 任务
    tasks.register('jarLite', Jar) {
        group = 'build'
        description = 'Assembles a lite jar without JS/Javet dependencies and resources'
        archiveFileName = 'extra-api-lite-1.0.0-SNAPSHOT.jar'
        
        // 包含编译后的 class 文件，但排除 JS 相关功能的类
        from(sourceSets.main.output.classesDirs) {
            exclude 'top/howiehz/halo/plugin/extra/api/service/js/**'   // 排除 JS 服务类
            exclude 'top/howiehz/halo/plugin/extra/api/finder/js/**'    // 排除 JS Finder 类
        }
        
        // 使用标准资源目录确保 plugin.yaml 被正确处理（包含 spec.version），但排除 JS 相关资源
        from(sourceSets.main.output.resourcesDir) {
            exclude 'js/**'                              // 排除 JS 资源文件
            exclude 'extensions/extension-definitions.yaml'  // 排除扩展定义文件（JS 功能需要）
        }
        
        // 包含基础运行时依赖，排除 Javet JavaScript 引擎
        from configurations.runtimeClasspath.filter { 
            !it.name.contains('javet')  // 过滤掉所有 javet 相关依赖
        }.collect { 
            it.isDirectory() ? it : zipTree(it)  // 展开 JAR 文件内容
        }
        
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE  // 排除重复文件
        
        // 任务依赖关系 - 暂时跳过 UI 依赖
        dependsOn 'compileJava'                                // 依赖 Java 编译
        dependsOn 'processResources'                           // 依赖标准资源处理
        dependsOn jarLiteIndexTask                             // 依赖对应的组件索引生成任务
        
        // 包含生成的组件索引文件
        into('META-INF') {
            from jarLiteIndexTask.get().outputFile
            rename { 'plugin-components.idx' }
        }
    }
    
    // 创建 jarFullAllPlatforms 任务
    tasks.register('jarFullAllPlatforms', Jar) {
        group = 'build'
        description = 'Assembles a full jar with all platform dependencies'
        archiveFileName = 'extra-api-full-all-platforms-1.0.0-SNAPSHOT.jar'
        
        from sourceSets.main.output                     // 包含所有编译输出（类和资源）
        from configurations.javetAllPlatforms.collect { // 包含全平台 Javet 依赖
            it.isDirectory() ? it : zipTree(it)         // 展开 JAR 文件内容
        }
        
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE  // 排除重复文件
        dependsOn 'classes'                             // 依赖完整编译（包含 UI 和 Shiki 资源）
        dependsOn jarFullAllPlatformsIndexTask          // 依赖对应的组件索引生成任务
        
        // 包含生成的组件索引文件
        into('META-INF') {
            from jarFullAllPlatformsIndexTask.get().outputFile
            rename { 'plugin-components.idx' }
        }
    }
    
    // 为每个平台生成特定的完整版 JAR
    platforms.each { variant, platformList ->
        def taskName = "jarFull${variant}"
        def configName = "javet${variant}"
        def archiveName = "extra-api-full-${variant.toLowerCase()}-1.0.0-SNAPSHOT.jar"
        def indexTaskName = "generatePluginComponentsIdx${taskName.capitalize()}"
        
        tasks.register(taskName, Jar) {
            group = 'build'
            description = "Assembles a full jar with ${variant} platform dependencies"
            archiveFileName = archiveName
            
            from sourceSets.main.output                         // 包含所有编译输出
            from configurations.getByName(configName).collect { // 包含特定平台 Javet 依赖
                it.isDirectory() ? it : zipTree(it)             // 展开 JAR 文件内容
            }
            
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE  // 排除重复文件
            dependsOn 'classes'                             // 依赖完整编译
            dependsOn indexTaskName                         // 依赖对应的组件索引生成任务
            
            // 包含生成的组件索引文件
            into('META-INF') {
                from tasks.named(indexTaskName).get().outputFile
                rename { 'plugin-components.idx' }
            }
        }
    }
}

// ========================================================================================
// JAR 构建任务
// ========================================================================================

// 所有 JAR 任务都在 afterEvaluate 块中创建，以确保正确的依赖解析

// ========================================================================================
// 默认任务配置
// ========================================================================================

// 禁用默认的 jar 任务，改为使用 jarFullAllPlatforms
jar {
    enabled = false                      // 禁用默认 jar 任务
    dependsOn 'jarFullAllPlatforms'      // 执行 jar 时实际构建完整版
}

// 默认 build 任务构建完整版
build {
    dependsOn 'jarFullAllPlatforms'      // 执行 build 时构建完整版
}

// ========================================================================================
// 便捷构建任务
// ========================================================================================

// 构建所有版本的任务 - 包括轻量版和所有平台的完整版
tasks.register('buildAll') {
    group = 'build'
    description = 'Build all jar variants'
    dependsOn 'jarLite'                  // 构建轻量版
    dependsOn 'jarFullAllPlatforms'      // 构建全平台完整版
    platforms.each { variant, platformList ->
        dependsOn "jarFull${variant}"    // 构建每个平台特定版本
    }
}

// 只构建轻量版的任务 - 用于快速测试和不需要 JS 功能的场景
tasks.register('buildLite') {
    group = 'build'
    description = 'Build lite version only'
    dependsOn 'jarLite'
}

// ========================================================================================
// Halo 插件配置
// ========================================================================================

halo {
    version = '2.21'  // 目标 Halo 版本
}
