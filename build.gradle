plugins {
    id 'java'
    id "io.freefair.lombok" version "8.14"
    id "run.halo.plugin.devtools" version "0.6.1"
}

group 'top.howiehz.halo.plugin.extra.api'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

// Javet 平台配置
def platforms = [
    'Linux-arm64': ['linux-arm64'],
    'Linux-x86_64': ['linux-x86_64'],
    'Macos-arm64': ['macos-arm64'],
    'Macos-x86_64': ['macos-x86_64'],
    'Windows-x86_64': ['windows-x86_64']
]

// 创建平台特定的配置
platforms.each { variant, platformList ->
    configurations.create("javet${variant}") {
        extendsFrom configurations.runtimeClasspath
    }
}

// 为每个平台配置添加 Javet 依赖
platforms.each { variant, platformList ->
    dependencies.add("javet${variant}", 'com.caoccao.javet:javet:4.1.7')
    platformList.each { platform ->
        def artifactName = "javet-node-${platform}"
        dependencies.add("javet${variant}", "com.caoccao.javet:${artifactName}:4.1.7")
    }
}

// 全平台配置
configurations {
    javetAllPlatforms {
        extendsFrom configurations.runtimeClasspath
    }
}

// 添加全平台 Javet 依赖
dependencies.add("javetAllPlatforms", 'com.caoccao.javet:javet:4.1.7')
platforms.each { variant, platformList ->
    platformList.each { platform ->
        def artifactName = "javet-node-${platform}"
        dependencies.add("javetAllPlatforms", "com.caoccao.javet:${artifactName}:4.1.7")
    }
}

dependencies {
    implementation platform('run.halo.tools.platform:plugin:2.21.0')
    compileOnly 'run.halo.app:api'
    
    // 包含 Javet 依赖
    implementation 'com.caoccao.javet:javet:4.1.7'
    
    // Spring 依赖
    compileOnly 'org.springframework:spring-context'
    compileOnly 'org.springframework:spring-core'
    compileOnly 'org.springframework:spring-beans'
    compileOnly 'org.springframework.data:spring-data-commons'
    compileOnly 'io.projectreactor:reactor-core'

    // 测试依赖
    testImplementation 'run.halo.app:api'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'com.caoccao.javet:javet:4.1.7'
}

test {
    useJUnitPlatform()
}

// 任务配置
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release = 21
}

// UI 资源处理（所有版本都需要）
tasks.register('processUiResources', Copy) {
    from project(':ui').layout.buildDirectory.dir('dist')
    into layout.buildDirectory.dir('resources/main/console')
    dependsOn project(':ui').tasks.named('assemble')
    shouldRunAfter tasks.named('processResources')
}

// Shiki 资源处理（仅完整版本需要）
tasks.register('processShikiResources', Copy) {
    from project(':shiki').layout.buildDirectory.dir('dist')
    into layout.buildDirectory.dir('resources/main/js')
    include 'shiki.umd.cjs'
    dependsOn project(':shiki').tasks.named('assemble')
    shouldRunAfter tasks.named('processResources')
}

// 创建 jarLite 专用的资源处理任务
tasks.register('processLiteResources', Copy) {
    group = 'build'
    description = 'Processes resources for lite version excluding JS dependencies'
    
    from(sourceSets.main.resources.srcDirs) {
        exclude 'js/**'
        exclude 'extensions/extension-definitions.yaml'
    }
    into layout.buildDirectory.dir('resources/lite')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    shouldRunAfter tasks.named('processResources')
}

// 完整版本的编译任务依赖
tasks.named('classes') {
    dependsOn tasks.named('processUiResources')
    dependsOn tasks.named('processShikiResources')
}

// ============ JAR 任务定义 ============

// 1. jarLite - 基础版本（完全排除JS功能和相关资源）
tasks.register('jarLite', Jar) {
    group = 'build'
    description = 'Assembles a lite jar without JS/Javet dependencies and resources'
    archiveFileName = 'extra-api-lite-1.0.0-SNAPSHOT.jar'
    
    // 只使用编译后的class文件，排除JS相关的class文件
    from(sourceSets.main.output.classesDirs) {
        exclude 'top/howiehz/halo/plugin/extra/api/service/js/**'
        exclude 'top/howiehz/halo/plugin/extra/api/finder/js/**'
    }
    
    // 使用专门的lite资源（已排除JS相关资源）
    from tasks.named('processLiteResources').get().destinationDir
    
    // 包含基础运行时依赖，排除Javet运行时
    from configurations.runtimeClasspath.filter { 
        !it.name.contains('javet') 
    }.collect { 
        it.isDirectory() ? it : zipTree(it) 
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn 'compileJava'
    dependsOn 'processResources'  // 需要先处理标准资源
    dependsOn 'processLiteResources'
    dependsOn 'processUiResources'  // UI资源仍然需要
    dependsOn 'generatePluginComponentsIdx'
    
    // jarLite 不依赖 src-js-bundle 的构建，所以不包含 processShikiResources
}

// 2. 平台特定的 jarFull 任务
platforms.each { variant, platformList ->
    def taskName = "jarFull${variant}"
    def configName = "javet${variant}"
    def archiveName = "extra-api-full-${variant.toLowerCase()}-1.0.0-SNAPSHOT.jar"
    
    tasks.register(taskName, Jar) {
        group = 'build'
        description = "Assembles a full jar with ${variant} platform dependencies"
        archiveFileName = archiveName
        
        from sourceSets.main.output
        from configurations.getByName(configName).collect { 
            it.isDirectory() ? it : zipTree(it) 
        }
        
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        dependsOn 'classes'
        dependsOn 'generatePluginComponentsIdx'
    }
}

// 3. jarFullAllPlatforms - 包含所有平台的完整版本
tasks.register('jarFullAllPlatforms', Jar) {
    group = 'build'
    description = 'Assembles a full jar with all platform dependencies'
    archiveFileName = 'extra-api-full-all-platforms-1.0.0-SNAPSHOT.jar'
    
    from sourceSets.main.output
    from configurations.javetAllPlatforms.collect { 
        it.isDirectory() ? it : zipTree(it) 
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn 'classes'
    dependsOn 'generatePluginComponentsIdx'
}

// ============ 默认任务配置 ============

// 修改默认 jar 任务为 jarFullAllPlatforms
jar {
    enabled = false
    dependsOn 'jarFullAllPlatforms'
}

// 修改默认 build 任务
build {
    dependsOn 'jarFullAllPlatforms'
}

// ============ 便捷任务 ============

// 构建所有版本的任务
tasks.register('buildAll') {
    group = 'build'
    description = 'Build all jar variants'
    dependsOn 'jarLite'
    dependsOn 'jarFullAllPlatforms'
    platforms.each { variant, platformList ->
        dependsOn "jarFull${variant}"
    }
}

// 只构建 lite 版本的任务
tasks.register('buildLite') {
    group = 'build'
    description = 'Build lite version only'
    dependsOn 'jarLite'
}

halo {
    version = '2.21'
}
