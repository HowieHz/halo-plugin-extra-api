plugins {
    id 'java'
    id "io.freefair.lombok" version "8.14"
    id "run.halo.plugin.devtools" version "0.6.1"
}

group 'top.howiehz.halo.plugin.extra.api'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

// Javet 平台配置
// 定义平台变体
def platforms = [
    'all': ['linux-arm64', 'linux-x86_64', 'macos-arm64', 'macos-x86_64', 'windows-x86_64'],
    'linux-arm64': ['linux-arm64'],
    'linux-x86_64': ['linux-x86_64'],
    'macos-arm64': ['macos-arm64'],
    'macos-x86_64': ['macos-x86_64'],
    'windows-x86_64': ['windows-x86_64']
]

// 为每个平台创建配置
platforms.each { variant, platformList ->
    configurations.create("runtime${variant.capitalize()}") {
        extendsFrom configurations.runtimeClasspath
    }
}

// 为每个平台配置添加 Javet 依赖
platforms.each { variant, platformList ->
    dependencies.add("runtime${variant.capitalize()}", 'com.caoccao.javet:javet:4.1.7')
    platformList.each { platform ->
        def artifactName = "javet-node-${platform}"
        dependencies.add("runtime${variant.capitalize()}", "com.caoccao.javet:${artifactName}:4.1.7")
    }
}

dependencies {
    implementation platform('run.halo.tools.platform:plugin:2.21.0')
    compileOnly 'run.halo.app:api'
    
    // Javet 基础依赖（运行时需要）
    implementation 'com.caoccao.javet:javet:4.1.7'
    
    // Add Spring dependencies for IDE support
    compileOnly 'org.springframework:spring-context'
    compileOnly 'org.springframework:spring-core'
    compileOnly 'org.springframework:spring-beans'
    compileOnly 'org.springframework.data:spring-data-commons'
    compileOnly 'io.projectreactor:reactor-core'

    testImplementation 'run.halo.app:api'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // Javet 基础依赖（测试运行时需要）
    testImplementation 'com.caoccao.javet:javet:4.1.7'
}

test {
    useJUnitPlatform()
}

// 创建平台特定的 JAR 包
platforms.each { variant, platformList ->
    def configName = "runtime${variant.capitalize()}"
    def jarTaskName = "jar${variant.capitalize()}"
    def archiveName = "extra-api-${variant}-1.0.0-SNAPSHOT.jar"
    
    tasks.register(jarTaskName, Jar) {
        group = 'build'
        description = "Assembles a jar archive containing the ${variant} platform dependencies"
        archiveFileName = archiveName
        from sourceSets.main.output
        from configurations.getByName(configName).collect { it.isDirectory() ? it : zipTree(it) }
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

// 检测当前平台
def os = System.getProperty("os.name").toLowerCase()
def arch = System.getProperty("os.arch").toLowerCase()
def platformConfig

if (os.contains("windows")) {
    platformConfig = configurations.runtimeWindowsX8664
} else if (os.contains("linux")) {
    if (arch.contains("aarch64") || arch.contains("arm64")) {
        platformConfig = configurations.runtimeLinuxArm64
    } else {
        platformConfig = configurations.runtimeLinuxX8664
    }
} else if (os.contains("mac")) {
    if (arch.contains("aarch64") || arch.contains("arm64")) {
        platformConfig = configurations.runtimeMacosArm64
    } else {
        platformConfig = configurations.runtimeMacosX8664
    }
} else {
    platformConfig = configurations.runtimeAll
}

// 修改默认 jar 任务使用全包含配置
jar {
    archiveFileName = "extra-api-1.0.0-SNAPSHOT.jar"
    from platformConfig.collect { it.isDirectory() ? it : zipTree(it) }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release = 21
}

tasks.register('processUiResources', Copy) {
    from project(':ui').layout.buildDirectory.dir('dist')
    into layout.buildDirectory.dir('resources/main/console')
    dependsOn project(':ui').tasks.named('assemble')
    shouldRunAfter tasks.named('processResources')
}

tasks.register('processShikiResources', Copy) {
    from project(':shiki').layout.buildDirectory.dir('dist')
    into layout.buildDirectory.dir('resources/main/js')
    include 'shiki.umd.cjs'
    dependsOn project(':shiki').tasks.named('assemble')
    shouldRunAfter tasks.named('processResources')
}

tasks.named('classes') {
    dependsOn tasks.named('processUiResources')
    dependsOn tasks.named('processShikiResources')
}

halo {
    version = '2.21'
}

