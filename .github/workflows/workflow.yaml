name: Build Plugin JAR File

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  release:
    types:
      - created
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          cache: 'gradle'
          java-version: 21
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 10
          run_install: false
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 24
          cache: 'pnpm'
          cache-dependency-path: 'ui/pnpm-lock.yaml'
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Install Frontend Dependencies
        run: |
          ./gradlew pnpmInstall
      - name: Build with Gradle
        run: |
          # Set the version with tag name when releasing
          version=${{ github.event.release.tag_name }}
          version=${version#v}
          if [ -n "$version" ]; then
            sed -i "s/version=.*-SNAPSHOT$/version=$version/1" gradle.properties
          fi
          ./gradlew clean jarLite jarAll jarLinux-arm64 jarLinux-x86_64 jarMacos-arm64 jarMacos-x86_64 jarWindows-x86_64
      - name: Archive extra-api jar
        uses: actions/upload-artifact@v4
        with:
          name: extra-api
          path: |
            build/libs/*.jar
          retention-days: 1
      - name: Upload extra-api-all
        uses: actions/upload-artifact@v4
        with:
          name: extra-api-all
          path: build/libs/extra-api-all-*.jar
          retention-days: 1
      - name: Upload extra-api-linux-arm64
        uses: actions/upload-artifact@v4
        with:
          name: extra-api-linux-arm64
          path: build/libs/extra-api-linux-arm64-*.jar
          retention-days: 1
      - name: Upload extra-api-linux-x86_64
        uses: actions/upload-artifact@v4
        with:
          name: extra-api-linux-x86_64
          path: build/libs/extra-api-linux-x86_64-*.jar
          retention-days: 1
      - name: Upload extra-api-macos-arm64
        uses: actions/upload-artifact@v4
        with:
          name: extra-api-macos-arm64
          path: build/libs/extra-api-macos-arm64-*.jar
          retention-days: 1
      - name: Upload extra-api-macos-x86_64
        uses: actions/upload-artifact@v4
        with:
          name: extra-api-macos-x86_64
          path: build/libs/extra-api-macos-x86_64-*.jar
          retention-days: 1
      - name: Upload extra-api-windows-x86_64
        uses: actions/upload-artifact@v4
        with:
          name: extra-api-windows-x86_64
          path: build/libs/extra-api-windows-x86_64-*.jar
          retention-days: 1
      - name: Upload extra-api-lite
        uses: actions/upload-artifact@v4
        with:
          name: extra-api-lite
          path: build/libs/extra-api-lite-*.jar
          retention-days: 1

  github-release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Download extra-api jar
        uses: actions/download-artifact@v4
        with:
          name: extra-api
          path: build/libs
      - name: Get Name of Artifacts
        id: get_artifacts
        run: |
          ARTIFACT_PATHNAMES=$(ls build/libs/*.jar)
          echo "Artifact pathnames: ${ARTIFACT_PATHNAMES}"
          echo "ARTIFACT_PATHNAMES=${ARTIFACT_PATHNAMES}" >> $GITHUB_ENV
          echo "RELEASE_ID=${{ github.event.release.id }}" >> $GITHUB_ENV
      - name: Upload Release Assets
        uses: actions/github-script@v2
        if: github.event_name == 'release'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log('environment', process.versions);

            const fs = require('fs').promises;

            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });

            const releaseId = process.env.RELEASE_ID;
            const artifactPathNames = process.env.ARTIFACT_PATHNAMES.split(' ');
            console.log('Releasing', releaseId, artifactPathNames);

            for (const artifactPathName of artifactPathNames) {
              const artifactName = artifactPathName.split('/').pop();
              console.log('Uploading', artifactPathName, artifactName);
              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: releaseId,
                name: artifactName,
                data: await fs.readFile(artifactPathName)
              });
            }
